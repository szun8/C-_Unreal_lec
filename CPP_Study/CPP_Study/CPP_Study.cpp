#include <iostream>
using namespace std;

// 오늘의 주제 : 
// bool은 그냥 정수지만, 참/거짓을 나타내기 위해 사용
// 사실 char도 마찬가지. (1바이트), 그냥 정수미누'문자' 의미를 나타내기 위해 사용
// 문자 데이터를 어떻게 분석하냐? = 아스키, 유니코드

// char : 알파벳 / 숫자 문자를 나타낸다
//wchar_t : 유니코드 문자를 나타낸다

// ASCII
// abcde 123456 - 인간 <-> 0 or 1 - 컴퓨터

// '문자'의 의미로 작은 따옴표 ''사용
char ch = 'a';
char ch2 = '1'; // 컴퓨터는 ASCII코드인 49로 저장을 해놓고
// 더하기 가능

// 전 세계 모든 문자에 대해 유일 코드를 부여한 것 = 유니코드
// 참고) 유니코드에서 가장 많은 번호를 차지하는게 한국어/중국어

// 유니코드는 표기 방식이 여러가지가 있음 -> 대표적으로 UTF8 UTF16
/*
	+ UTF8
- 알파벳, 숫자 1바이트(ASCII 동일한 번호)
- 유럽 지역의 문자는 2바이트
- 한글, 한자 등 3바이트
		=> 모든 국가들의 문자를 포용하기 위해선 16버전이 더 나음
		=> 한자, 한글을 표현하면 너무 길어질수있는 단점
		=> 문자별로 끊어내는 과정이 일정하지 않아 문자 구별 어렵 
	+ UTF16
- 알파벳, 숫자,한글, 한자 등 거의 대부분 문자 2바이트 구성
		=> 대부분 2바이트 구성이라 위의 단점을 보완해줌
- 매---우 예외적인 고대문자만 4바이트 (사실상 무시 가능) 
*/

wchar_t wch = 0xc548; // = L'안';
					  // L을 입력해주면 2바이트로 저장

/*
+ Escape Sequence : 표기하기 애매한 특수문자 애들을 표헌
	- \t = 아스키코드9 = Tab
	- \n = 아스키코드10 = LineFee(엔터)
	- \r = 아스키코드13 = CarriageReturn (커서 <<)
	- \'(작은따옴표)
	- \0 = 아스키코드0 = NULL
*/

// 문자열 : 문자들이 열을 지어서 모여 있는 것 (문자배열)
// 정수 (1~8바이트) 고정 길이로 입력 But, 문자는 얼마나 입력할지 모름 (길이가변)
// \00 = NULL 끝인식 저장해서 문자열 끝


int main()
{
	char str[] = { 'h', 'e', 'l', 'l', 'o', '\0' };
	char str2[] = "hello World"; // 12글자로 잡혀있음!
	wchar_t str3[] = L"Hello World"; // 유니코드로 변환되어 반환

	cout << ch << endl;
	cout << ch2 << endl; // 1을 출력

	// cout은 char 전용
	// 유니코드 출력을 위해서는 아래와 같이 해줘야함
	wcout.imbue(locale("kor"));
	wcout << wch << endl;

	cout << str3 << endl; //스택메모리에서 문자열입력시 null 입력 필수(아니면 끝 인식하려고 쓰레기값 출력)
}